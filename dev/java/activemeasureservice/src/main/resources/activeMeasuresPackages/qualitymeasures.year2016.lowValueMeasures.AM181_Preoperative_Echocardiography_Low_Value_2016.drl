package net.ahm.activemeasure.qualitymeasures.year2016.lowValueMeasures.AM181_Preoperative_Echocardiography_Low_Value_2016

import net.ahm.careengine.domain.member.MemberInfo
import net.ahm.careengine.domain.event.claim.ClaimHeader
import net.ahm.careengine.domain.measures.active.ActiveMeasure
import net.ahm.careengine.domain.member.ActiveMeasuresMemberInfo
import net.ahm.careengine.util.GlobalFunctions
import net.ahm.careengine.service.activemeasure.ActiveMeasureCommandOutputIF
import net.ahm.careengine.domain.member.Gender
import net.ahm.careengine.domain.measures.active.ActiveMeasure
import net.ahm.careengine.domain.member.ActiveMeasuresMemberInfo
import net.ahm.careengine.domain.measures.active.ActiveMeasureRuleContext
import net.ahm.careengine.domain.measures.active.ActiveMeasure
import net.ahm.careengine.domain.event.lab.LabEvent
import net.ahm.careengine.domain.event.proc.ProcedureEvent
import net.ahm.careengine.domain.event.diag.DiagnosticEvent
import net.ahm.careengine.domain.measures.active.impl.MemberActiveMeasure
import net.ahm.careengine.domain.event.drug.DrugEvent
import net.ahm.careengine.util.OverlappedEvents
import net.ahm.careengine.util.GlobalFunctions
import net.ahm.careengine.service.activemeasure.ActiveMeasureCommandOutputIF
import java.util.Collection
import java.util.Date
import net.ahm.careengine.domain.feedback.Feedback
import net.ahm.careengine.domain.measures.active.ActiveMeasureBuilder
import net.ahm.careengine.domain.event.claim.ClaimHeader
import net.ahm.careengine.domain.event.clinical.HieEncounter
import net.ahm.careengine.event.adt.model.DischargeDispositionStatus
import net.ahm.careengine.domain.event.pdd.PatientDerivedEvent
import net.ahm.careengine.domain.event.lab.LabResultEvent
import net.ahm.careengine.bom.clinical.HieMood
import net.ahm.careengine.ruleengine.DroolEditor
import net.ahm.careengine.ruleengine.DateTimeUnit
import net.ahm.careengine.domain.event.Event
import net.ahm.careengine.domain.event.adt.BaseAdmissionDischardTransferEvent
import org.joda.time.LocalDate
import net.ahm.careengine.domain.temporal.ContiguousDays
import net.ahm.careengine.domain.measures.active.FactLevelMeasureNumerator
import net.ahm.careengine.domain.measures.active.FactLevelMeasureDenominator
import net.ahm.careengine.domain.measures.active.FactLevelMeasureBuilder
import net.ahm.careengine.domain.classifier.Classifier

global java.util.Date measurementEndDate
global net.ahm.careengine.domain.measures.active.ActiveMeasureBuilder activeMeasureBuilder
global java.util.Date months12BeforeMeasurementEndDate
global java.util.Date years10BeforeMeasurementEndDate
global java.util.Date years5BeforeMeasurementEndDate
global java.util.Date months24BeforeMeasurementEndDate
global java.util.Date months3BeforeMeasurementEndDate
global java.util.Date months1BeforeMeasurementEndDate
global java.util.Date measurementStartDate
global net.ahm.careengine.domain.measures.active.FactLevelMeasureBuilder factLevelMeasureBuilder




















rule "AM181_DENOM"
	dialect "mvel"
	when
		 ActiveMeasuresMemberInfo( ageAtMeasurementEndDate >= 18 )
		 java.util.Collection( empty == false ) from collect ( ProcedureEvent( elements contains 9386 , startDate <= measurementEndDate , startDate >= months12BeforeMeasurementEndDate )) 
		 ProcedureEvent( elements contains 9371 , $procDate : startDate <= measurementEndDate , startDate >= months12BeforeMeasurementEndDate )
	then
		ActiveMeasure mam = (activeMeasureBuilder.newActiveMeasureWithAlternateStartDate(181 , $procDate)); insert(mam)
end


rule "AM181_NUM"
	dialect "mvel"
	when
		$am : ActiveMeasure(measureId == 181)
		$30daysBeforeProc : java.util.Date() from GlobalFunctions.getEarlierDate($am.getAlternateStartDate(), 30, DateTimeUnit.DAY)
		 ProcedureEvent( elements contains 9390 , $ecgDate : startDate <= ( $am.getAlternateStartDate() )  && <= measurementEndDate , startDate >= ( $30daysBeforeProc )  && >= months12BeforeMeasurementEndDate , $ecgDates : contiguousDays != null )
		$30daysBeforeEcg : java.util.Date() from GlobalFunctions.getEarlierDate($ecgDate, 30, DateTimeUnit.DAY)
		$1daysBeforeEcg : java.util.Date() from GlobalFunctions.getEarlierDate($ecgDate, 1, DateTimeUnit.DAY)
		 not (ProcedureEvent( elements contains 9382 , startDate <= measurementEndDate , startDate >= months12BeforeMeasurementEndDate , eval( contiguousDays.intersectsButNotAdjacent($ecgDates) ))) 
		 not (ProcedureEvent( elements contains 9382 , endDate >= ( $30daysBeforeEcg )  && <= $ecgDate , endDate <= measurementEndDate , endDate >= months12BeforeMeasurementEndDate )) 
		 not (ProcedureEvent( elements contains 9383 , startDate >= ( $1daysBeforeEcg ) , startDate <= $ecgDate , startDate >= months12BeforeMeasurementEndDate , startDate <= measurementEndDate )) 
	then
		$am.setInNumerator(true)
end


