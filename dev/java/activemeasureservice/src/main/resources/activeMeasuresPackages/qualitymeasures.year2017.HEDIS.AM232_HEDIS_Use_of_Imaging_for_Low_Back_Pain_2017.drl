package net.ahm.activemeasure.qualitymeasures.year2017.HEDIS.AM232_HEDIS_Use_of_Imaging_for_Low_Back_Pain_2017

import net.ahm.careengine.domain.member.MemberInfo
import net.ahm.careengine.domain.measures.active.impl.MemberActiveMeasure
import net.ahm.careengine.domain.measures.active.ActiveMeasure
import net.ahm.careengine.domain.event.proc.ProcedureEvent
import net.ahm.careengine.domain.event.diag.DiagnosticEvent
import net.ahm.careengine.domain.member.GenderSelection
import net.ahm.careengine.service.activemeasure.ActiveMeasureCommandOutputIF
import net.ahm.careengine.domain.member.Gender
import net.ahm.careengine.ruleengine.DroolEditor
import net.ahm.careengine.domain.event.drug.DrugEvent
import net.ahm.careengine.domain.measures.active.ActiveMeasureRuleContext
import net.ahm.careengine.util.GlobalFunctions
import net.ahm.careengine.ruleengine.DateTimeUnit
import java.util.Collection
import java.util.Date
import net.ahm.careengine.domain.event.CodifiedEvent
import net.ahm.careengine.domain.event.lab.LabEvent
import net.ahm.careengine.domain.event.lab.LabResultEvent
import net.ahm.careengine.util.OverlappedEvents
import net.ahm.careengine.domain.classifier.Classifier
import net.ahm.careengine.domain.classifier.ClassifierBuilder
import net.ahm.careengine.domain.feedback.Feedback
import net.ahm.careengine.domain.event.claim.ClaimHeader
import net.ahm.careengine.domain.event.clinical.HieEncounter
import net.ahm.careengine.event.adt.model.DischargeDispositionStatus
import net.ahm.careengine.domain.member.ActiveMeasuresMemberInfo
import net.ahm.careengine.domain.event.pdd.PatientDerivedEvent
import net.ahm.careengine.domain.event.Event
import net.ahm.careengine.util.CEDateUtil
import net.ahm.careengine.domain.temporal.TemporalUtil
import net.ahm.careengine.util.Month
import net.ahm.careengine.domain.event.claim.ClaimLabResultInfo
import net.ahm.careengine.domain.event.claim.ClaimBaseInfo
import net.ahm.careengine.domain.event.claim.ClaimLabInfo
import net.ahm.careengine.domain.event.claim.ClaimDiagnosticInfo
import net.ahm.careengine.domain.event.claim.ClaimProcedureInfo
import net.ahm.careengine.domain.event.claim.ClaimDrugInfo
import net.ahm.careengine.bom.clinical.HieMood
import net.ahm.careengine.bom.clinical.HieSource
import net.ahm.careengine.domain.measures.active.ActiveMeasureClassifierBuilder
import net.ahm.careengine.domain.event.adt.BaseAdmissionDischardTransferEvent
import net.ahm.careengine.domain.temporal.ContiguousDays
import net.ahm.careengine.domain.feedback.Feedback.FeedbackReferenceType
import net.ahm.careengine.domain.event.LatestEventAccumulationFunction
import net.ahm.careengine.domain.measures.active.FactLevelMeasureNumerator
import net.ahm.careengine.domain.measures.active.FactLevelMeasureDenominator
import net.ahm.careengine.domain.measures.active.FactLevelMeasureBuilder
import net.ahm.careengine.domain.event.drug.DrugDispensingEvent
import net.ahm.careengine.domain.temporal.Span
import net.ahm.careengine.domain.temporal.Temporal
import net.ahm.careengine.domain.temporal.ContiguousDaysExpressable
import net.ahm.careengine.domain.fact.ClassifiedFact

global java.util.Date measurementEndDate
global net.ahm.careengine.domain.measures.active.ActiveMeasureBuilder activeMeasureBuilder
global java.util.Date months12BeforeMeasurementEndDate
global java.util.Date months24BeforeMeasurementEndDate
global java.util.Date months27BeforeMeasurementEndDate
global java.util.Date years10BeforeMeasurementEndDate
global java.util.Date years5BeforeMeasurementEndDate
global java.util.Date months6BeforeMeasurementEndDate
global net.ahm.careengine.domain.measures.active.FactLevelMeasureBuilder factLevelMeasureBuilder
global java.util.Date months3BeforeMeasurementEndDate
global java.util.Date months1BeforeMeasurementEndDate
global java.util.Date years3BeforeMeasurementEndDate
global net.ahm.careengine.domain.measures.active.ActiveMeasureClassifierBuilder classifierBuilder

















rule "AM232_DENOM_FIRST_IESD"
	dialect "mvel"
	when
		 BaseAdmissionDischardTransferEvent( $IESD : endDate != null ) from accumulate ( ClassifiedFact( classifier != null , classifier.id in ( 174, 168 ) , $event : event != null ),
			firstEvent($event)) 
		$28daysAfterIESD : java.util.Date() from GlobalFunctions.getLaterDate($IESD, 28, DateTimeUnit.DAY)
	then
		ActiveMeasure mam = activeMeasureBuilder.newActiveMeasureWithAlternateStartAndEndDate(232 , $IESD , $28daysAfterIESD); insert(mam)
end


rule "AM232_DENOM_EXCL_DX_5988"
	dialect "mvel"
	when
		 $am : ActiveMeasure( measureId == 232 )
		$days180BeforeIESD : java.util.Date() from GlobalFunctions.getEarlierDate($am.getAlternateStartDate(), 180, DateTimeUnit.DAY)
		 java.util.Collection( empty == false ) from collect ( DiagnosticEvent( elements contains 5988 , startDate < ( $am.getAlternateStartDate() )  && >= ( $days180BeforeIESD ) )) 
	then
		$am.setExcludedFromDenominator(true)
end


rule "AM232_DENOM_EXCL_DX_5989_OR_2315"
	dialect "mvel"
	when
		 $am : ActiveMeasure( measureId == 232 )
		 java.util.Collection( empty == false ) from collect ( DiagnosticEvent( elements contains 5989  || contains 2315 , startDate <= ( $am.getAlternateEndDate() )  && <= measurementEndDate )) 
	then
		$am.setExcludedFromDenominator(true)
end


rule "AM232_DENOM_EXCL_DX_9414"
	dialect "mvel"
	when
		 $am : ActiveMeasure( measureId == 232 )
		$days90BeforeIESD : java.util.Date() from GlobalFunctions.getEarlierDate($am.getAlternateStartDate(), 90, DateTimeUnit.DAY)
		 java.util.Collection( empty == false ) from collect ( DiagnosticEvent( elements contains 9414 , startDate <= ( $am.getAlternateEndDate() ) , startDate >= ( $days90BeforeIESD ) )) 
	then
		$am.setExcludedFromDenominator(true)
end


rule "AM232_DENOM_EXCL_DX_9415_OR_9416"
	dialect "mvel"
	when
		 $am : ActiveMeasure( measureId == 232 )
		$1yearBeforeIESD : java.util.Date() from GlobalFunctions.getEarlierDate($am.getAlternateStartDate(), 1, DateTimeUnit.YEAR)
		 java.util.Collection( empty == false ) from collect ( DiagnosticEvent( elements contains 9416  || contains 9415 , startDate <= ( $am.getAlternateEndDate() )  && <= measurementEndDate , startDate >= ( $1yearBeforeIESD ) )) 
	then
		$am.setExcludedFromDenominator(true)
end


rule "AM232_DENOM_EXCL_PROC_9417"
	dialect "mvel"
	when
		 $am : ActiveMeasure( measureId == 232 )
		 java.util.Collection( empty == false ) from collect ( ProcedureEvent( elements contains 9417 , startDate <= ( $am.getAlternateEndDate() )  && <= measurementEndDate )) 
	then
		$am.setExcludedFromDenominator(true)
end


rule "AM232_ENROLLMENT_NO_GAP"
	dialect "mvel"
	when
		 $am : ActiveMeasure( measureId == 232 )
		$days180BeforeIESD : java.util.Date() from GlobalFunctions.getEarlierDate($am.getAlternateStartDate(), 180, DateTimeUnit.DAY)
		MemberInfo ( $initialGapDays2 : enrolmentGapDays ); java.util.Collection( size >=  1 ) from collect ( ContiguousDays( durationInDays >=  1) from GlobalFunctions.filterWholeDays( $initialGapDays2, $days180BeforeIESD, $am.getAlternateEndDate() ) )
	then
		$am.setEligible(false)
end


rule "AM232_DENOM_EXCL_RX_9418"
	dialect "mvel"
	when
		 $am : ActiveMeasure( measureId == 232 )
		$1yearBeforeIESD : java.util.Date() from GlobalFunctions.getEarlierDate($am.getAlternateStartDate(), 1, DateTimeUnit.YEAR)
		 eventCollection : java.util.Collection( empty == false ) from collect ( DrugEvent( elements contains 9418 , startDate >= ( $1yearBeforeIESD )  && <= ( $am.getAlternateStartDate() ) )) 
		net.ahm.careengine.domain.measures.active.ActiveMeasureRuleContext(); java.lang.Number(intValue >=  90) from (GlobalFunctions.getLargestContinuousDaysSupplyOfDrugs(eventCollection,$1yearBeforeIESD,$am.getAlternateStartDate()))
	then
		$am.setExcludedFromDenominator(true)
end


rule "AM232_NUMERATOR"
	dialect "mvel"
	when
		 $am : ActiveMeasure( measureId == 232 )
		 java.util.Collection( empty == false ) from collect ( ProcedureEvent( elements contains 5991 , endDate >= ( $am.getAlternateStartDate() ) , endDate <= ( $am.getAlternateEndDate() )  && <= measurementEndDate )) 
	then
		$am.setInNumerator(true)
end










rule "AM232_DENOM_DX5988_PROC9411_OR_8615_OR_9412_CLASSIFIER_168"
	salience 100
	dialect "mvel"
	when
		$Jan1MsYr : java.util.Date() from GlobalFunctions.startDayOfRangeEndingOn(measurementEndDate, 1, DateTimeUnit.YEAR)
		$yr18 : java.util.Date() from GlobalFunctions.getEarlierDate($Jan1MsYr, 18, DateTimeUnit.YEAR)
		$Dec3 : java.util.Date() from GlobalFunctions.getEarlierDate(measurementEndDate, 28, DateTimeUnit.DAY)
		 ActiveMeasuresMemberInfo( birthDate <= ( $yr18 ) , ageAtMeasurementEndDate <= 50 )
		 fact : BaseAdmissionDischardTransferEvent( principalDiagnosisElements contains 5988 , endDate <= ( $Dec3 )  && >= months12BeforeMeasurementEndDate , relatedProcedureEventElements contains 9411  || contains 8615  || contains 9412 )
	then
		Classifier classifier = classifierBuilder.getClassifierForQualityMeasure(168); insert(classifier); ClassifiedFact classifiedFact = classifierBuilder.getClassifiedFactForQualityMeasure(classifier, fact ); insert(classifiedFact);
end


rule "AM232_DENOM_DX_5988_PROC_5873_OR_8835_CLASSIFIER_174"
	salience 100
	dialect "mvel"
	when
		$Jan1MsYr : java.util.Date() from GlobalFunctions.startDayOfRangeEndingOn(measurementEndDate, 1, DateTimeUnit.YEAR)
		$yr18 : java.util.Date() from GlobalFunctions.getEarlierDate($Jan1MsYr, 18, DateTimeUnit.YEAR)
		$Dec3 : java.util.Date() from GlobalFunctions.getEarlierDate(measurementEndDate, 28, DateTimeUnit.DAY)
		 ActiveMeasuresMemberInfo( birthDate <= ( $yr18 ) , ageAtMeasurementEndDate <= 50 )
		 fact : BaseAdmissionDischardTransferEvent( principalDiagnosisElements contains 5988 , relatedProcedureEventElements contains 5873  || contains 8835 , $dischargeDate : endDate <= ( $Dec3 )  && >= months12BeforeMeasurementEndDate )
		$1dayAfterFirstDischarge : java.util.Date() from GlobalFunctions.getLaterDate($dischargeDate, 1, DateTimeUnit.DAY)
		 not (ProcedureEvent( elements contains 8927 , startDate <= ( $1dayAfterFirstDischarge )  && <= measurementEndDate , startDate >= $dischargeDate )) 
	then
		Classifier classifier = classifierBuilder.getClassifierForQualityMeasure(174); insert(classifier); ClassifiedFact classifiedFact = classifierBuilder.getClassifiedFactForQualityMeasure(classifier, fact ); insert(classifiedFact);
end


