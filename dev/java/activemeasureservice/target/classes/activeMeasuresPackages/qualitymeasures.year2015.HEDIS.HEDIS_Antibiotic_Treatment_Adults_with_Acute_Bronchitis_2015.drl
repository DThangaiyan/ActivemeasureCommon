package net.ahm.activemeasure.qualitymeasures.year2015.HEDIS.HEDIS_Antibiotic_Treatment_Adults_with_Acute_Bronchitis_2015

import net.ahm.careengine.domain.member.MemberInfo
import net.ahm.careengine.domain.measures.active.impl.MemberActiveMeasure
import net.ahm.careengine.domain.measures.active.ActiveMeasure
import net.ahm.careengine.domain.event.proc.ProcedureEvent
import net.ahm.careengine.domain.event.diag.DiagnosticEvent
import net.ahm.careengine.domain.member.GenderSelection
import net.ahm.careengine.service.activemeasure.ActiveMeasureCommandOutputIF
import net.ahm.careengine.domain.member.Gender
import net.ahm.careengine.ruleengine.DroolEditor
import net.ahm.careengine.domain.event.drug.DrugEvent
import net.ahm.careengine.domain.measures.active.ActiveMeasureRuleContext
import net.ahm.careengine.util.GlobalFunctions
import net.ahm.careengine.util.CommonGlobalFunctions
import net.ahm.careengine.ruleengine.DateTimeUnit
import java.util.Collection
import java.util.Date
import net.ahm.careengine.domain.event.CodifiedEvent
import net.ahm.careengine.domain.event.lab.LabEvent
import net.ahm.careengine.domain.event.lab.LabResultEvent
import net.ahm.careengine.util.OverlappedEvents
import net.ahm.careengine.domain.classifier.Classifier
import net.ahm.careengine.domain.classifier.ClassifierBuilder
import net.ahm.careengine.domain.feedback.Feedback
import net.ahm.careengine.domain.event.claim.ClaimHeader
import net.ahm.careengine.domain.event.clinical.HieEncounter
import net.ahm.careengine.event.adt.model.DischargeDispositionStatus
import net.ahm.careengine.domain.member.ActiveMeasuresMemberInfo
import net.ahm.careengine.domain.event.pdd.PatientDerivedEvent
import net.ahm.careengine.domain.event.Event
import net.ahm.careengine.domain.measures.active.ActiveMeasureClassifierBuilder
import net.ahm.careengine.ruleengine.DateTimeUnit
import net.ahm.careengine.util.GlobalFunctions
import net.ahm.careengine.util.OverlappedEvents
import net.ahm.careengine.util.CEDateUtil
import net.ahm.careengine.util.Month
import net.ahm.careengine.domain.temporal.Span
import net.ahm.careengine.domain.temporal.Temporal
import net.ahm.careengine.domain.temporal.ContiguousDays
import net.ahm.careengine.domain.fact.ClassifiedFact

global java.util.Date measurementEndDate
global net.ahm.careengine.domain.measures.active.ActiveMeasureBuilder activeMeasureBuilder
global java.util.Date months12BeforeMeasurementEndDate
global java.util.Date months24BeforeMeasurementEndDate
global java.util.Date months27BeforeMeasurementEndDate
global java.util.Date years10BeforeMeasurementEndDate
global java.util.Date years5BeforeMeasurementEndDate
global java.util.Date months6BeforeMeasurementEndDate
global java.util.Date years3BeforeMeasurementEndDate
global net.ahm.careengine.domain.measures.active.ActiveMeasureClassifierBuilder classifierBuilder














rule "NUM_ABSENCE_ANTIBACTERIAL_AGENTS"
	dialect "mvel"
	when
		 $am : ActiveMeasure( measureId == 52 )
		threeDaysAfterED : java.util.Date() from GlobalFunctions.getLaterDate($am.getAlternateStartDate(), 3, DateTimeUnit.DAY)
		 not (DrugEvent( elements contains 5972 , endDate <= ( threeDaysAfterED ) , endDate >= $am.alternateStartDate )) 
	then
		 $am.setInNumerator( true );
end






rule "DENOM_LABEL_ANTIBIOTIC_TREATMENT_ACUTE_BRONCHITIS_AND_ENROLLMENT_46DAY_GAP_CLASSIFIER115"
	salience 110
	dialect "mvel"
	when
		intakeEnd : java.util.Date() from GlobalFunctions.getEarlierDate(measurementEndDate, 7, DateTimeUnit.DAY)
		intakeStart : java.util.Date() from GlobalFunctions.startDayOfRangeEndingOn(measurementEndDate, 1, DateTimeUnit.YEAR)
		Jan1stYearBeforeMsEndDate : java.util.Date() from GlobalFunctions.startDayOfRangeEndingOn(measurementEndDate, 2, DateTimeUnit.YEAR)
		dobMax : java.util.Date() from GlobalFunctions.getEarlierDate(Jan1stYearBeforeMsEndDate, 18, DateTimeUnit.YEAR)
		dobMin : java.util.Date() from GlobalFunctions.getEarlierDate(measurementEndDate, 65, DateTimeUnit.YEAR)
		 ActiveMeasuresMemberInfo( birthDate <= ( dobMax )  && > ( dobMin ) )
		 $bronchitisDiagnosis : DiagnosticEvent( elements contains 6003 , endDate <= ( intakeEnd ) , $diagEndDate : endDate >= ( intakeStart ) )
		 java.util.Collection( empty == false ) from collect ( ProcedureEvent( elements contains 6004 , endDate <= ( intakeEnd ) , endDate >= ( intakeStart ) , endDate >= ( $bronchitisDiagnosis.getContiguousDays().getStart() ) , endDate <= ( $bronchitisDiagnosis.getContiguousDays().getEnd() ) )) 
		thirtyDaysBeforeED : java.util.Date() from GlobalFunctions.startDayOfRangeEndingOn($bronchitisDiagnosis.getContiguousDays().getStart(), 31, DateTimeUnit.DAY)
		sevenDaysAfterED : java.util.Date() from GlobalFunctions.getLaterDate($bronchitisDiagnosis.getContiguousDays().getStart(), 7, DateTimeUnit.DAY)
		twelveMonthsBeforeED : java.util.Date() from GlobalFunctions.startDayOfRangeEndingOn($bronchitisDiagnosis.getContiguousDays().getStart(), 12, DateTimeUnit.MONTH)
		 not (DrugEvent( elements contains 5972 , endDate <= ( $bronchitisDiagnosis.getContiguousDays().getStart() ) , endDate >= ( thirtyDaysBeforeED ) )) 
		 not (DiagnosticEvent( elements contains 4798 , endDate <= ( sevenDaysAfterED ) , endDate >= ( thirtyDaysBeforeED ) )) 
		 not (ProcedureEvent( elements contains 5902 , endDate == ( $bronchitisDiagnosis.getContiguousDays().getStart() ) )) 
		 not (DiagnosticEvent( elements contains 6005 , endDate >= ( twelveMonthsBeforeED ) , endDate <= ( $bronchitisDiagnosis.getContiguousDays().getStart() ) )) 
		MemberInfo ( $initialGapDays2 : enrolmentGapDays ); java.util.Collection( size ==  0 ) from collect ( ContiguousDays( durationInDays >=  46) from GlobalFunctions.filterWholeDays( $initialGapDays2, twelveMonthsBeforeED, sevenDaysAfterED ) )
		MemberInfo ( $initialGapDays3 : pharmacyEnrollmentGapDays ); java.util.Collection( size ==  0 ) from collect ( ContiguousDays( durationInDays >=  46) from GlobalFunctions.filterWholeDays( $initialGapDays3, twelveMonthsBeforeED, sevenDaysAfterED ) )
	then
		Classifier classifier = classifierBuilder.getClassifierForQualityMeasure(115); insert(classifier); ClassifiedFact classifiedFact = classifierBuilder.getClassifiedFactForQualityMeasure(classifier, $bronchitisDiagnosis ); insert(classifiedFact);
end


rule "DENOM_EXCL_PDD"
	dialect "mvel"
	when
		 $am : ActiveMeasure( measureId == 52 )
		 ( PatientDerivedEvent( endDate <= measurementEndDate , endDate >= months12BeforeMeasurementEndDate , elements contains 8952 ) or PatientDerivedEvent( endDate <= measurementEndDate , endDate >= months12BeforeMeasurementEndDate , elements contains 8953 ) or PatientDerivedEvent( endDate <= measurementEndDate , endDate >= months12BeforeMeasurementEndDate , elements contains 8954 ) or PatientDerivedEvent( endDate <= measurementEndDate , endDate >= months12BeforeMeasurementEndDate , elements contains 8903 ) )
	then
		$am.setExcludedFromDenominator(true)
end


rule "NUM_PDD"
	dialect "mvel"
	when
		$am : ActiveMeasure( measureId == 52 )
		PatientDerivedEvent( endDate <= measurementEndDate , endDate >= months12BeforeMeasurementEndDate , elements contains 8951 )
	then
		$am.setInNumerator( true );
end


rule "DENOM_LABEL_ACUTE_BRONCHITIS_MULTIPLE_GAPS_CLASSIFIER136"
	salience 100
	dialect "mvel"
	when
		 $classifier : Classifier( id == 115 )
		 ClassifiedFact( classifier == $classifier , $fact : event, $startDate : event.startDate != null )
		oneYearBeforeED : java.util.Date() from GlobalFunctions.startDayOfRangeEndingOn($startDate, 1, DateTimeUnit.YEAR)
		sevenDaysAfterED : java.util.Date() from GlobalFunctions.getLaterDate($startDate, 7, DateTimeUnit.DAY)
		MemberInfo ( $initialGapDays2 : enrolmentGapDays ); java.util.Collection( size <=  1 ) from collect ( ContiguousDays( durationInDays >=  1) from GlobalFunctions.filterWholeDays( $initialGapDays2, oneYearBeforeED, sevenDaysAfterED ) )
		MemberInfo ( $initialGapDays3 : pharmacyEnrollmentGapDays ); java.util.Collection( size <=  1 ) from collect ( ContiguousDays( durationInDays >=  1) from GlobalFunctions.filterWholeDays( $initialGapDays3, oneYearBeforeED, sevenDaysAfterED ) )
	then
		Classifier classifier = classifierBuilder.getClassifierForQualityMeasure(136); insert(classifier); ClassifiedFact classifiedFact = classifierBuilder.getClassifiedFactForQualityMeasure(classifier, $fact ); insert(classifiedFact);
end


rule "DENOM_ACUTE_BRONCHITIS"
	dialect "mvel"
	when
		 $classifier : Classifier( id == 136 )
		 DiagnosticEvent( $startDate : startDate) from accumulate ( ClassifiedFact( classifier == $classifier , $event : event != null ),
			firstEvent($event)) 
	then
		ActiveMeasure mam = (activeMeasureBuilder.newActiveMeasureWithAlternateStartDate(52 , $startDate)); insert(mam)
end


