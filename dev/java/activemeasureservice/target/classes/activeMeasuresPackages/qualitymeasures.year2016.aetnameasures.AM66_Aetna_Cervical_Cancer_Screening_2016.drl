package net.ahm.activemeasure.qualitymeasures.year2016.aetnameasures.AM66_Aetna_Cervical_Cancer_Screening_2016

import net.ahm.careengine.domain.member.ActiveMeasuresMemberInfo
import net.ahm.careengine.domain.measures.active.ActiveMeasureRuleContext
import net.ahm.careengine.domain.measures.active.ActiveMeasure
import net.ahm.careengine.domain.event.lab.LabEvent
import net.ahm.careengine.domain.event.proc.ProcedureEvent
import net.ahm.careengine.domain.event.diag.DiagnosticEvent
import net.ahm.careengine.domain.measures.active.impl.MemberActiveMeasure
import net.ahm.careengine.domain.event.drug.DrugEvent
import net.ahm.careengine.util.GlobalFunctions
import net.ahm.careengine.service.activemeasure.ActiveMeasureCommandOutputIF
import java.util.Collection
import java.util.Date
import net.ahm.careengine.domain.event.pdd.PatientDerivedEvent
import net.ahm.careengine.domain.feedback.Feedback
import net.ahm.careengine.util.OverlappedEvents
import net.ahm.careengine.domain.event.claim.ClaimHeader
import net.ahm.careengine.domain.event.clinical.HieEncounter
import net.ahm.careengine.event.adt.model.DischargeDispositionStatus
import net.ahm.careengine.domain.event.Event
import net.ahm.careengine.bom.clinical.HieMood
import net.ahm.careengine.bom.clinical.HieSource
import net.ahm.careengine.util.GlobalFunctions
import net.ahm.careengine.domain.event.proc.ProcedureEvent
import net.ahm.careengine.ruleengine.DateTimeUnit
import net.ahm.careengine.domain.measures.active.ActiveMeasureClassifierBuilder
import net.ahm.careengine.domain.event.adt.BaseAdmissionDischardTransferEvent
import net.ahm.careengine.domain.member.MemberInfo
import net.ahm.careengine.domain.classifier.Classifier
import net.ahm.careengine.domain.temporal.ContiguousDays
import net.ahm.careengine.domain.member.GenderSelection
import net.ahm.careengine.ruleengine.DroolEditor
import net.ahm.careengine.domain.feedback.Feedback.FeedbackReferenceType
import net.ahm.careengine.util.Month
import net.ahm.careengine.util.CEDateUtil

global java.util.Date measurementEndDate
global net.ahm.careengine.domain.measures.active.ActiveMeasureBuilder activeMeasureBuilder
global java.util.Date months12BeforeMeasurementEndDate
global java.util.Date years10BeforeMeasurementEndDate
global java.util.Date years5BeforeMeasurementEndDate
global java.util.Date months24BeforeMeasurementEndDate
global java.util.Date months3BeforeMeasurementEndDate
global java.util.Date months1BeforeMeasurementEndDate
global java.util.Date years3BeforeMeasurementEndDate
global net.ahm.careengine.domain.measures.active.ActiveMeasureClassifierBuilder classifierBuilder















rule "AM66_DENOM_CERVICAL_CANCER_SCREENING"
	dialect "mvel"
	when
		 ActiveMeasuresMemberInfo( ageAtMeasurementEndDate >= 24  && <= 64 , gender == Gender.FEMALE )
	then
		ActiveMeasure mam = activeMeasureBuilder.newActiveMeasure(66); insert(mam)
end


rule "AM66_NUM"
	dialect "mvel"
	when
		$am : ActiveMeasure( measureId == 66 )
		( Classifier( id == 78 ) or Classifier( id == 79 ) )
	then
		$am.setInNumerator( true );
end


rule "AM66_DENOM_EXCL_PROC_6021"
	dialect "mvel"
	when
		$am : ActiveMeasure( measureId == 66 )
		ProcedureEvent( elements contains 6021 , endDate <= measurementEndDate )
	then
		$am.setExcludedFromDenominator( true );
end


rule "AM66_DENOM_EXCL_DX_6022"
	dialect "mvel"
	when
		$am : ActiveMeasure( measureId == 66 )
		DiagnosticEvent( endDate <= measurementEndDate , elements contains 6022 )
	then
		$am.setExcludedFromDenominator( true );
end


rule "AM66_NUM_ELIGIBILITY_ONE_GAP_UPTO_46_DAYS_IN_PRIOR_YEAR"
	dialect "mvel"
	when
		 $am : ActiveMeasure( measureId == 66 )
		 not (Classifier( id == 78 )) 
		 not (Classifier( id == 79 )) 
		oneYrBeforeMsYrEndDate : java.util.Date() from GlobalFunctions.getEarlierDate(measurementEndDate, 1, DateTimeUnit.YEAR)
		MemberInfo ( $initialGapDays2 : enrolmentGapDays ); java.util.Collection( size >=  1 ) from collect ( ContiguousDays( durationInDays >=  46) from GlobalFunctions.filterWholeDays( $initialGapDays2, GlobalFunctions.startDayOfRangeEndingOn( oneYrBeforeMsYrEndDate, 1, DateTimeUnit.YEAR ) , oneYrBeforeMsYrEndDate ) )
	then
		 $am.setEligible( false );
end


rule "AM66_NUM_ELIGIBILITY_ONE_GAP_UPTO_46_DAYS_IN_PRIOR_2_YEAR"
	dialect "mvel"
	when
		 $am : ActiveMeasure( measureId == 66 )
		 not (Classifier( id == 78 )) 
		 not (Classifier( id == 79 )) 
		twoYrBeforeMsYrEndDate : java.util.Date() from GlobalFunctions.getEarlierDate(measurementEndDate, 2, DateTimeUnit.YEAR)
		MemberInfo ( $initialGapDays2 : enrolmentGapDays ); java.util.Collection( size >=  1 ) from collect ( ContiguousDays( durationInDays >=  46) from GlobalFunctions.filterWholeDays( $initialGapDays2, GlobalFunctions.startDayOfRangeEndingOn( twoYrBeforeMsYrEndDate, 1, DateTimeUnit.YEAR ) , twoYrBeforeMsYrEndDate ) )
	then
		 $am.setEligible( false );
end


rule "AM66_NUM_ELIGIBILITY_2_OR_MORE_GAPS_IN_PRIOR_2_YEAR"
	dialect "mvel"
	when
		 $am : ActiveMeasure( measureId == 66 )
		 not (Classifier( id == 78 )) 
		 not (Classifier( id == 79 )) 
		twoYrbeforeMsYrEndDate : java.util.Date() from GlobalFunctions.getEarlierDate(measurementEndDate, 2, DateTimeUnit.YEAR)
		MemberInfo ( $initialGapDays2 : enrolmentGapDays ); java.util.Collection( size >=  2 ) from collect ( ContiguousDays( durationInDays >=  1) from GlobalFunctions.filterWholeDays( $initialGapDays2, GlobalFunctions.startDayOfRangeEndingOn( twoYrbeforeMsYrEndDate, 1, DateTimeUnit.YEAR ) , twoYrbeforeMsYrEndDate ) )
	then
		 $am.setEligible( false );
end


rule "AM66_NUM_ELIGIBILITY_2_OR_MORE_GAPS_IN_PRIOR_YEAR"
	dialect "mvel"
	when
		 $am : ActiveMeasure( measureId == 66 )
		 not (Classifier( id == 78 )) 
		 not (Classifier( id == 79 )) 
		oneYrbeforeMsYrEndDate : java.util.Date() from GlobalFunctions.getEarlierDate(measurementEndDate, 1, DateTimeUnit.YEAR)
		MemberInfo ( $initialGapDays2 : enrolmentGapDays ); java.util.Collection( size >=  2 ) from collect ( ContiguousDays( durationInDays >=  1) from GlobalFunctions.filterWholeDays( $initialGapDays2, GlobalFunctions.startDayOfRangeEndingOn( oneYrbeforeMsYrEndDate, 1, DateTimeUnit.YEAR ) , oneYrbeforeMsYrEndDate ) )
	then
		 $am.setEligible( false );
end




